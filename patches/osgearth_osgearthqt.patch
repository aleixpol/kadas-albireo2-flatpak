diff -rupN osgearth-osgearth-2.10.2/CMakeLists.txt osgearth-osgearth-2.10.2-new/CMakeLists.txt
--- osgearth-osgearth-2.10.2/CMakeLists.txt	2019-07-12 17:49:14.000000000 +0200
+++ osgearth-osgearth-2.10.2-new/CMakeLists.txt	2019-10-01 15:59:04.697488098 +0200
@@ -329,6 +329,7 @@ OPTION(BUILD_OSGEARTH_EXAMPLES "Enable t
 # Applications and tests
 OPTION(BUILD_APPLICATIONS "Enable build of Applications" ON)
 OPTION(BUILD_TESTS "Enable build of Tests" ON)
+OPTION(BUILD_OSGEARTHQT "Enable build of osgEarthQt" OFF)
 
 # OE Core
 ADD_SUBDIRECTORY(src)
diff -rupN osgearth-osgearth-2.10.2/src/applications/CMakeLists.txt osgearth-osgearth-2.10.2-new/src/applications/CMakeLists.txt
--- osgearth-osgearth-2.10.2/src/applications/CMakeLists.txt	2019-07-12 17:49:14.000000000 +0200
+++ osgearth-osgearth-2.10.2-new/src/applications/CMakeLists.txt	2019-10-01 15:59:04.697488098 +0200
@@ -108,6 +108,11 @@ IF(BUILD_OSGEARTH_EXAMPLES)
 
 ENDIF(BUILD_OSGEARTH_EXAMPLES)
 
+IF(BUILD_OSGEARTHQT)
+    ADD_SUBDIRECTORY(osgearth_qt_simple)
+    ADD_SUBDIRECTORY(osgearth_qt_windows)
+ENDIF()
+
 ELSE()
 
     IF(BUILD_OSGEARTH_EXAMPLES)
@@ -116,4 +121,4 @@ ELSE()
         ADD_SUBDIRECTORY(osgearth_viewerIOS)
     ENDIF()
 
-ENDIF()
\ No newline at end of file
+ENDIF()
diff -rupN osgearth-osgearth-2.10.2/src/applications/osgearth_qt_simple/CMakeLists.txt osgearth-osgearth-2.10.2-new/src/applications/osgearth_qt_simple/CMakeLists.txt
--- osgearth-osgearth-2.10.2/src/applications/osgearth_qt_simple/CMakeLists.txt	2019-07-12 17:49:14.000000000 +0200
+++ osgearth-osgearth-2.10.2-new/src/applications/osgearth_qt_simple/CMakeLists.txt	2019-10-01 16:20:02.927432951 +0200
@@ -1,47 +1,21 @@
-IF(QT4_FOUND)
-INCLUDE( ${QT_USE_FILE} )
-ENDIF()
+INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIRS} )
+FIND_PACKAGE(Qt5Widgets REQUIRED)
+FIND_PACKAGE(Qt5OpenGL REQUIRED)
+FIND_OSG_LIBRARY( OSGQT_LIBRARY osgQt5 )
 
-INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIRS} ${QT_INCLUDES} )
-
-SET(MOC_HDRS
-)
-
-IF(Qt5Widgets_FOUND)
-    SET(MOC_SRCS)
-    FOREACH( MOC_HDR ${MOC_HDRS} )
-        GET_FILENAME_COMPONENT( MOC_HDR_ABS ${MOC_HDR} ABSOLUTE )
-        QT5_WRAP_CPP( MOC_SRC ${MOC_HDR} OPTIONS "-f${MOC_HDR_ABS}" )
-        LIST( APPEND MOC_SRCS ${MOC_SRC} )
-    ENDFOREACH()
-    SET(OSGEARTH_QT_LIBRARY osgEarthQt5)
-ENDIF()
-
-IF(QT4_FOUND)
-    QT4_WRAP_CPP( MOC_SRCS ${MOC_HDRS} OPTIONS "-f" )
-    SET(OSGEARTH_QT_LIBRARY osgEarthQt)
-ENDIF()
-
-SET(TARGET_H
-    ${LIB_QT_RCS}
-)
+SET(OSGEARTH_QT_LIBRARY osgEarthQt5)
 
 SET(TARGET_SRC
-    ${MOC_SRCS}
-    ${LIB_RC_SRCS}
     osgearth_qt_simple.cpp
 )
 
 SET(TARGET_ADDED_LIBRARIES
     ${OSGEARTH_QT_LIBRARY}
-    ${QT_QTCORE_LIBRARY}
-    ${QT_QTGUI_LIBRARY}
-    ${QT_QTOPENGL_LIBRARY}
+    ${OSGQT_LIBRARY}
+    Qt5::Core
+    Qt5::Gui
+    Qt5::OpenGL
 )
 
 #### end var setup  ###
-IF(Qt5Widgets_FOUND)
 SETUP_APPLICATION(osgearth_qt5_simple)
-ELSE(Qt5Widgets_FOUND)
-SETUP_APPLICATION(osgearth_qt_simple)
-ENDIF(Qt5Widgets_FOUND)
diff -rupN osgearth-osgearth-2.10.2/src/applications/osgearth_qt_windows/CMakeLists.txt osgearth-osgearth-2.10.2-new/src/applications/osgearth_qt_windows/CMakeLists.txt
--- osgearth-osgearth-2.10.2/src/applications/osgearth_qt_windows/CMakeLists.txt	2019-07-12 17:49:14.000000000 +0200
+++ osgearth-osgearth-2.10.2-new/src/applications/osgearth_qt_windows/CMakeLists.txt	2019-10-01 16:19:59.119433119 +0200
@@ -1,42 +1,21 @@
-INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIRS} ${QT_INCLUDES} )
+INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIRS} )
+FIND_PACKAGE(Qt5Widgets REQUIRED)
+FIND_PACKAGE(Qt5OpenGL REQUIRED)
+FIND_OSG_LIBRARY( OSGQT_LIBRARY osgQt5 )
 
-SET(MOC_HDRS
-)
-
-IF(Qt5Widgets_FOUND)
-    SET(MOC_SRCS)
-    FOREACH( MOC_HDR ${MOC_HDRS} )
-        GET_FILENAME_COMPONENT( MOC_HDR_ABS ${MOC_HDR} ABSOLUTE )
-        QT5_WRAP_CPP( MOC_SRC ${MOC_HDR} OPTIONS "-f${MOC_HDR_ABS}" )
-        LIST( APPEND MOC_SRCS ${MOC_SRC} )
-    ENDFOREACH()
-    SET(OSGEARTH_QT_LIBRARY osgEarthQt5)
-ELSE()
-    INCLUDE( ${QT_USE_FILE} )
-    QT4_WRAP_CPP( MOC_SRCS ${MOC_HDRS} OPTIONS "-f" )
-    SET(OSGEARTH_QT_LIBRARY osgEarthQt)
-ENDIF()
-
-SET(TARGET_H
-    ${LIB_QT_RCS}
-)
+SET(OSGEARTH_QT_LIBRARY osgEarthQt5)
 
 SET(TARGET_SRC
-    ${MOC_SRCS}
-    ${LIB_RC_SRCS}
     osgearth_qt_windows.cpp
 )
 
 SET(TARGET_ADDED_LIBRARIES
     ${OSGEARTH_QT_LIBRARY}
-    ${QT_QTCORE_LIBRARY}
-    ${QT_QTGUI_LIBRARY}
-    ${QT_QTOPENGL_LIBRARY}
+    ${OSGQT_LIBRARY}
+    Qt5::Core
+    Qt5::Gui
+    Qt5::OpenGL
 )
 
 #### end var setup  ###
-IF(Qt5Widgets_FOUND)
 SETUP_APPLICATION(osgearth_qt5_windows)
-ELSE(Qt5Widgets_FOUND)
-SETUP_APPLICATION(osgearth_qt_windows)
-ENDIF(Qt5Widgets_FOUND)
diff -rupN osgearth-osgearth-2.10.2/src/CMakeLists.txt osgearth-osgearth-2.10.2-new/src/CMakeLists.txt
--- osgearth-osgearth-2.10.2/src/CMakeLists.txt	2019-07-12 17:49:14.000000000 +0200
+++ osgearth-osgearth-2.10.2-new/src/CMakeLists.txt	2019-10-01 15:59:04.698488098 +0200
@@ -30,6 +30,9 @@ IF(BUILD_TESTS AND NOT OSGEARTH_BUILD_PL
     ADD_SUBDIRECTORY( tests )
 ENDIF()
 
+IF(BUILD_OSGEARTHQT)
+    ADD_SUBDIRECTORY( osgEarthQt )
+ENDIF()
 
 IF(MSVC80)
   OPTION(OSGEARTH_MSVC_GENERATE_PLUGINS_AND_WRAPPERS_MANIFESTS "Generate or not manifests files under VS8 for dynamically loaded dlls" ON)
diff -rupN osgearth-osgearth-2.10.2/src/osgEarthQt/CMakeLists.txt osgearth-osgearth-2.10.2-new/src/osgEarthQt/CMakeLists.txt
--- osgearth-osgearth-2.10.2/src/osgEarthQt/CMakeLists.txt	2019-07-12 17:49:14.000000000 +0200
+++ osgearth-osgearth-2.10.2-new/src/osgEarthQt/CMakeLists.txt	2019-10-01 16:21:06.552430151 +0200
@@ -1,170 +1,143 @@
+FIND_PACKAGE(Qt5Widgets REQUIRED)
+FIND_PACKAGE(Qt5OpenGL REQUIRED)
+FIND_OSG_LIBRARY( OSGQT_LIBRARY osgQt5 )
+
+if(DYNAMIC_OSGEARTH)
+    ADD_DEFINITIONS(-DOSGEARTHQT_LIBRARY)
+else(DYNAMIC_OSGEARTH)
+    ADD_DEFINITIONS(-DOSGEARTHQT_LIBRARY_STATIC)
+endif(DYNAMIC_OSGEARTH)
+
+SET(LIB_NAME osgEarthQt5)
+SET(HEADER_INSTALL_DIR osgEarthQt)
+
+SET(HEADER_PATH ${OSGEARTH_SOURCE_DIR}/include/${LIB_NAME})
+
+if(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
+    # Header files that need moc'd
+    set(LIB_MOC_HDRS
+        CollapsiblePairWidget
+        DataManager
+        LayerManagerWidget
+        LOSControlWidget
+        LOSCreationDialog
+        MapCatalogWidget
+        TerrainProfileGraph
+        TerrainProfileWidget
+        ViewerWidget
+    )
+
+    # Qt resource files
+    set(LIB_QT_RCS
+        images.qrc
+    )
+
+    # Qt UI files
+    set(LIB_QT_UIS
+        ui/LOSCreationDialog.ui
+    )
+
+    SET(LIB_PUBLIC_HEADERS
+    #   header files go here
+        Actions
+        CollapsiblePairWidget
+        Common
+        DataManager
+        GuiActions
+        LayerManagerWidget
+        LOSControlWidget
+        LOSCreationDialog
+        MapCatalogWidget
+        TerrainProfileGraph
+        TerrainProfileWidget
+        ViewWidget
+        ViewerWidget
+        ${LIB_UI_HDRS}
+        ${LIB_QT_UIS}
+        ${LIB_QT_RCS}
+    )
+
+    QT5_WRAP_CPP( LIB_MOC_SRCS ${LIB_MOC_HDRS} )
+    QT5_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
+    QT5_WRAP_UI( LIB_UI_HDRS ${LIB_QT_UIS} )
+
+    ADD_LIBRARY(${LIB_NAME} ${OSGEARTH_USER_DEFINED_DYNAMIC_OR_STATIC}
+        ${LIB_PUBLIC_HEADERS}
+    #  .cpp files go here
+        ${LIB_RC_SRCS}
+        ${LIB_UI_SRCS}
+        ${LIB_MOC_SRCS}
+        CollapsiblePairWidget.cpp
+        DataManager.cpp
+        LayerManagerWidget.cpp
+        LOSControlWidget.cpp
+        LOSCreationDialog.cpp
+        MapCatalogWidget.cpp
+        TerrainProfileGraph.cpp
+        TerrainProfileWidget.cpp
+        ViewWidget.cpp
+        ViewerWidget.cpp
+    )
+else(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
+    # Header files that need moc'd
+    set(LIB_MOC_HDRS
+        ViewerWidget
+    )
+
+    SET(LIB_PUBLIC_HEADERS
+    #   header files go here
+        Common
+        ViewWidget
+        ViewerWidget
+        ${LIB_UI_HDRS}
+        ${LIB_QT_UIS}
+        ${LIB_QT_RCS}
+   )
+   QT5_WRAP_CPP( LIB_MOC_SRCS ${LIB_MOC_HDRS} )
+
+    ADD_LIBRARY(${LIB_NAME} ${OSGEARTH_USER_DEFINED_DYNAMIC_OR_STATIC}
+        ${LIB_PUBLIC_HEADERS}
+    #  .cpp files go here
+        ${LIB_RC_SRCS}
+        ${LIB_UI_SRCS}
+        ${LIB_MOC_SRCS}
+        ViewWidget.cpp
+        ViewerWidget.cpp
+    )
+endif(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
+
+INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIR} ${OSGEARTH_SOURCE_DIR} ${QT_INCLUDES} ${CMAKE_CURRENT_BINARY_DIR})
+
+IF (WIN32)
+    LINK_EXTERNAL(${LIB_NAME} ${TARGET_EXTERNAL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
+ELSE(WIN32)
+    LINK_EXTERNAL(${LIB_NAME} ${TARGET_EXTERNAL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY} ${X11_LIBRARIES})
+ENDIF(WIN32)
+
+if(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
+    link_internal(${LIB_NAME}
+        osgEarth
+        osgEarthAnnotation
+        osgEarthUtil
+        Qt5::Gui
+        Qt5::Widgets
+        Qt5::OpenGL
+    )
+else(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
+    link_internal(${LIB_NAME}
+        osgEarth
+        osgEarthUtil
+        Qt5::Gui
+        Qt5::Widgets
+        Qt5::OpenGL
+    )
+endif(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
 
-IF (Qt5Widgets_FOUND OR QT4_FOUND AND NOT ANDROID AND OSGEARTH_QT_BUILD)
+LINK_WITH_VARIABLES(${LIB_NAME} OSG_LIBRARY OSGWIDGET_LIBRARY OSGUTIL_LIBRARY OSGSIM_LIBRARY OSGTERRAIN_LIBRARY OSGDB_LIBRARY OSGFX_LIBRARY OSGVIEWER_LIBRARY OSGTEXT_LIBRARY OSGGA_LIBRARY OSGQT_LIBRARY OPENTHREADS_LIBRARY)
 
-    if(DYNAMIC_OSGEARTH)
-        ADD_DEFINITIONS(-DOSGEARTHQT_LIBRARY)
-    else(DYNAMIC_OSGEARTH)
-        ADD_DEFINITIONS(-DOSGEARTHQT_LIBRARY_STATIC)
-    endif(DYNAMIC_OSGEARTH)
-
-    IF(Qt5Widgets_FOUND)
-      SET(LIB_NAME osgEarthQt5)
-      SET(HEADER_INSTALL_DIR osgEarthQt)
-    ELSE(Qt5Widgets_FOUND)
-      SET(LIB_NAME osgEarthQt)
-    ENDIF(Qt5Widgets_FOUND)
-
-    SET(HEADER_PATH ${OSGEARTH_SOURCE_DIR}/include/${LIB_NAME})
-
-    if(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-        # Header files that need moc'd
-        set(LIB_MOC_HDRS
-            CollapsiblePairWidget
-            DataManager
-            LayerManagerWidget
-            LOSControlWidget
-            LOSCreationDialog
-            MapCatalogWidget
-            TerrainProfileGraph
-            TerrainProfileWidget
-            ViewerWidget
-        )
-
-        # Qt resource files
-        set(LIB_QT_RCS
-            images.qrc
-        )
-
-        # Qt UI files
-        set(LIB_QT_UIS
-            ui/LOSCreationDialog.ui
-        )
-    else(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-        # Header files that need moc'd
-        set(LIB_MOC_HDRS
-            ViewerWidget
-        )
-    endif(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-
-    IF(Qt5Widgets_FOUND)
-        QT5_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
-        QT5_WRAP_UI( LIB_UI_HDRS ${LIB_QT_UIS} )
-        QT5_WRAP_CPP( LIB_UI_SRCS ${LIB_UI_HDRS} )
-        SET(LIB_MOC_SRCS)
-        FOREACH( LIB_MOC_HDR ${LIB_MOC_HDRS} )
-            GET_FILENAME_COMPONENT( LIB_MOC_HDR_ABS ${LIB_MOC_HDR} ABSOLUTE )
-            QT5_WRAP_CPP( LIB_MOC_SRC ${LIB_MOC_HDR} OPTIONS "-f${LIB_MOC_HDR_ABS}" )
-            LIST( APPEND LIB_MOC_SRCS ${LIB_MOC_SRC} )
-        ENDFOREACH()
-    ELSE()
-        INCLUDE( ${QT_USE_FILE} )
-        QT4_ADD_RESOURCES( LIB_RC_SRCS ${LIB_QT_RCS} )
-        QT4_WRAP_UI( LIB_UI_HDRS ${LIB_QT_UIS} )
-        QT4_WRAP_CPP( LIB_UI_SRCS ${LIB_UI_HDRS} OPTIONS "-f" )
-        QT4_WRAP_CPP( LIB_MOC_SRCS ${LIB_MOC_HDRS} OPTIONS "-f" )
-    ENDIF()
-
-    if(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-        SET(LIB_PUBLIC_HEADERS
-        #   header files go here
-            Actions
-            CollapsiblePairWidget
-            Common
-            DataManager
-            GuiActions
-            LayerManagerWidget
-            LOSControlWidget
-            LOSCreationDialog
-            MapCatalogWidget
-            TerrainProfileGraph
-            TerrainProfileWidget
-            ViewWidget
-            ViewerWidget
-            ${LIB_UI_HDRS}
-            ${LIB_QT_UIS}
-            ${LIB_QT_RCS}
-        )
-
-        ADD_LIBRARY(${LIB_NAME} ${OSGEARTH_USER_DEFINED_DYNAMIC_OR_STATIC}
-            ${LIB_PUBLIC_HEADERS}
-        #  .cpp files go here
-            ${LIB_RC_SRCS}
-            ${LIB_UI_SRCS}
-            ${LIB_MOC_SRCS}
-            CollapsiblePairWidget.cpp
-            DataManager.cpp
-            LayerManagerWidget.cpp
-            LOSControlWidget.cpp
-            LOSCreationDialog.cpp
-            MapCatalogWidget.cpp
-            TerrainProfileGraph.cpp
-            TerrainProfileWidget.cpp
-            ViewWidget.cpp
-            ViewerWidget.cpp
-        )
-    else(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-        SET(LIB_PUBLIC_HEADERS
-        #   header files go here
-            Common
-            ViewWidget
-            ViewerWidget
-            ${LIB_UI_HDRS}
-            ${LIB_QT_UIS}
-            ${LIB_QT_RCS}
-        )
-
-        ADD_LIBRARY(${LIB_NAME} ${OSGEARTH_USER_DEFINED_DYNAMIC_OR_STATIC}
-            ${LIB_PUBLIC_HEADERS}
-        #  .cpp files go here
-            ${LIB_RC_SRCS}
-            ${LIB_UI_SRCS}
-            ${LIB_MOC_SRCS}
-            ViewWidget.cpp
-            ViewerWidget.cpp
-        )
-    endif(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-
-    INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIR} ${OSGEARTH_SOURCE_DIR} ${QT_INCLUDES} ${CMAKE_CURRENT_BINARY_DIR})
-
-    IF (WIN32)
-      LINK_EXTERNAL(${LIB_NAME} ${TARGET_EXTERNAL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
-    ELSE(WIN32)
-      LINK_EXTERNAL(${LIB_NAME} ${TARGET_EXTERNAL_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
-    ENDIF(WIN32)
-
-    if(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-        link_internal(${LIB_NAME}
-            osgEarth
-            osgEarthAnnotation
-            osgEarthUtil
-            ${QT_QTCORE_LIBRARY}
-            ${QT_QTGUI_LIBRARY}
-            ${QT_QTOPENGL_LIBRARY}
-            ${QT_QTOPENGLEXTENSIONS_LIBRARY}
-        )
-    else(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-        link_internal(${LIB_NAME}
-            osgEarth
-            osgEarthUtil
-            ${QT_QTCORE_LIBRARY}
-            ${QT_QTGUI_LIBRARY}
-            ${QT_QTOPENGL_LIBRARY}
-            ${QT_QTOPENGLEXTENSIONS_LIBRARY}
-        )
-    endif(OSGEARTH_QT_BUILD_LEGACY_WIDGETS)
-
-    LINK_WITH_VARIABLES(${LIB_NAME} OSG_LIBRARY OSGWIDGET_LIBRARY OSGUTIL_LIBRARY OSGSIM_LIBRARY OSGTERRAIN_LIBRARY OSGDB_LIBRARY OSGFX_LIBRARY OSGVIEWER_LIBRARY OSGTEXT_LIBRARY OSGGA_LIBRARY OSGQT_LIBRARY OPENTHREADS_LIBRARY)
-
-    LINK_CORELIB_DEFAULT(${LIB_NAME} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
-
-    IF ( Qt5Widgets_FOUND )
-	FIND_PACKAGE(Qt5OpenGL REQUIRED)
-	TARGET_LINK_LIBRARIES( ${LIB_NAME} Qt5::Gui Qt5::Widgets Qt5::OpenGL )
-    ENDIF( Qt5Widgets_FOUND )
+LINK_CORELIB_DEFAULT(${LIB_NAME} ${CMAKE_THREAD_LIBS_INIT} ${MATH_LIBRARY})
 
-    # Add this project to the NodeKits solution folder
-    set_property( TARGET ${LIB_NAME} PROPERTY FOLDER "NodeKits" )
+# Add this project to the NodeKits solution folder
+set_property( TARGET ${LIB_NAME} PROPERTY FOLDER "NodeKits" )
 
-    INCLUDE(ModuleInstall OPTIONAL)
-
-ENDIF (Qt5Widgets_FOUND OR QT4_FOUND AND NOT ANDROID AND OSGEARTH_QT_BUILD)
+INCLUDE(ModuleInstall OPTIONAL)
